{"ast":null,"code":"import \"core-js/modules/es.error.cause.js\";\n// @ is an alias to /src\nexport default {\n  data() {\n    return {\n      videoWidth: 2500,\n      videoHeight: 500,\n      imgSrc: \"\",\n      thisCancas: null,\n      thisContext: null,\n      thisVideo: null,\n      openVideo: false\n    };\n  },\n\n  mounted() {\n    this.getCompetence(); //进入页面就调用摄像头\n  },\n\n  methods: {\n    // 调用权限（打开摄像头功能）\n    getCompetence() {\n      const _this = this;\n\n      _this.thisCancas = document.getElementById(\"canvasCamera\");\n      _this.thisContext = this.thisCancas.getContext(\"2d\");\n      _this.thisVideo = document.getElementById(\"videoCamera\");\n      _this.thisVideo.style.display = 'block'; // 获取媒体属性，旧版本浏览器可能不支持mediaDevices，我们首先设置一个空对象\n\n      if (navigator.mediaDevices === undefined) {\n        navigator.mediaDevices = {};\n      } // 一些浏览器实现了部分mediaDevices，我们不能只分配一个对象\n      // 使用getUserMedia，因为它会覆盖现有的属性。\n      // 这里，如果缺少getUserMedia属性，就添加它。\n\n\n      if (navigator.mediaDevices.getUserMedia === undefined) {\n        navigator.mediaDevices.getUserMedia = function (constraints) {\n          // 首先获取现存的getUserMedia(如果存在)\n          const getUserMedia = navigator.webkitGetUserMedia || navigator.mozGetUserMedia || navigator.getUserMedia; // 有些浏览器不支持，会返回错误信息\n          // 保持接口一致\n\n          if (!getUserMedia) {\n            //不存在则报错\n            return Promise.reject(new Error(\"getUserMedia is not implemented in this browser\"));\n          } // 否则，使用Promise将调用包装到旧的navigator.getUserMedia\n\n\n          return new Promise(function (resolve, reject) {\n            getUserMedia.call(navigator, constraints, resolve, reject);\n          });\n        };\n      }\n\n      const constraints = {\n        audio: false,\n        video: {\n          width: this.videoWidth,\n          height: this.videoHeight,\n          transform: \"scaleX(-1)\"\n        }\n      };\n      navigator.mediaDevices.getUserMedia(constraints).then(function (stream) {\n        // 旧的浏览器可能没有srcObject\n        if (\"srcObject\" in _this.thisVideo) {\n          _this.thisVideo.srcObject = stream;\n        } else {\n          // 避免在新的浏览器中使用它，因为它正在被弃用。\n          _this.thisVideo.src = window.URL.createObjectURL(stream);\n        }\n\n        _this.thisVideo.onloadedmetadata = function () {\n          _this.thisVideo.play();\n        };\n      }).catch(err => {\n        console.log(err);\n      });\n    },\n\n    //  绘制图片（拍照功能）\n    setImage() {\n      const _this = this; // canvas画图\n\n\n      _this.thisContext.drawImage(_this.thisVideo, 300, 200, _this.videoWidth, _this.videoHeight); // 获取图片base64链接\n\n\n      _this.imgSrc = this.thisCancas.toDataURL(\"image/png\"); //赋值并预览图片\n    },\n\n    // 关闭摄像头\n    stopNavigator() {\n      this.thisVideo.srcObject.getTracks()[0].stop();\n    }\n\n  }\n};","map":{"version":3,"mappings":";AAkBA;AACA;EACAA;IACA;MACAC,gBADA;MAEAC,gBAFA;MAGAC,UAHA;MAIAC,gBAJA;MAKAC,iBALA;MAMAC,eANA;MAOAC;IAPA;EASA,CAXA;;EAYAC;IACA,qBADA,CACA;EACA,CAdA;;EAeAC;IACA;IACAC;MACA;;MACAC;MACAA;MACAA;MACAA,wCALA,CAMA;;MACA;QACAC;MACA,CATA,CAUA;MACA;MACA;;;MACA;QACAA;UACA;UACA,qBACAA,gCACAA,yBADA,IAEAA,sBAHA,CAFA,CAMA;UACA;;UACA;YAAA;YACA,sBACA,4DADA;UAGA,CAZA,CAaA;;;UACA;YACAC;UACA,CAFA;QAGA,CAjBA;MAkBA;;MACA;QACAC,YADA;QAEAC;UACAC,sBADA;UAEAC,wBAFA;UAGAC;QAHA;MAFA;MAQAN,uBACAC,YADA,CACAM,WADA,EAEAC,IAFA,CAEA;QACA;QACA;UACAT;QACA,CAFA,MAEA;UACA;UACAA;QACA;;QACAA;UACAA;QACA,CAFA;MAGA,CAbA,EAcAU,KAdA,CAcAC;QACAC;MACA,CAhBA;IAiBA,CA5DA;;IA6DA;IACAC;MACA,mBADA,CAEA;;;MACAb,4BACAA,eADA,EAEA,GAFA,EAGA,GAHA,EAIAA,gBAJA,EAKAA,iBALA,EAHA,CAUA;;;MACAA,sDAXA,CAWA;IACA,CA1EA;;IA2EA;IACAc;MACA;IACA;;EA9EA;AAfA","names":["data","videoWidth","videoHeight","imgSrc","thisCancas","thisContext","thisVideo","openVideo","mounted","methods","getCompetence","_this","navigator","getUserMedia","audio","video","width","height","transform","constraints","then","catch","err","console","setImage","stopNavigator"],"sourceRoot":"src/views","sources":["AboutView.vue"],"sourcesContent":["<template>\r\n  <div class=\"camera_outer\">\r\n    <video id=\"videoCamera\" :width=\"videoWidth\" :height=\"videoHeight\" autoplay></video>\r\n    <canvas style=\"display:none;\" id=\"canvasCamera\" :width=\"videoWidth\" :height=\"videoHeight\"></canvas>\r\n    <div v-if=\"imgSrc\" class=\"img_bg_camera\">\r\n      <p>效果预览</p>\r\n      <img :src=\"imgSrc\" alt class=\"tx_img\" />\r\n    </div>\r\n    <div class=\"button\" style=\"text-align: center\">\r\n      <el-button type=\"danger\" @click=\"getCompetence() \">打开摄像头</el-button>\r\n      <el-button type=\"danger\" @click=\"stopNavigator()\">关闭摄像头</el-button>\r\n      <el-button type=\"danger\" @click=\"setImage()\">拍照</el-button>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n\r\n<script>\r\n// @ is an alias to /src\r\nexport default {\r\n  data() {\r\n    return {\r\n      videoWidth: 2500,\r\n      videoHeight: 500,\r\n      imgSrc: \"\",\r\n      thisCancas: null,\r\n      thisContext: null,\r\n      thisVideo: null,\r\n      openVideo:false\r\n    };\r\n  },\r\n  mounted(){\r\n    this.getCompetence()//进入页面就调用摄像头\r\n  },\r\n  methods: {\r\n    // 调用权限（打开摄像头功能）\r\n    getCompetence() {\r\n      const _this = this;\r\n      _this.thisCancas = document.getElementById(\"canvasCamera\");\r\n      _this.thisContext = this.thisCancas.getContext(\"2d\");\r\n      _this.thisVideo = document.getElementById(\"videoCamera\");\r\n      _this.thisVideo.style.display = 'block';\r\n      // 获取媒体属性，旧版本浏览器可能不支持mediaDevices，我们首先设置一个空对象\r\n      if (navigator.mediaDevices === undefined) {\r\n        navigator.mediaDevices = {};\r\n      }\r\n      // 一些浏览器实现了部分mediaDevices，我们不能只分配一个对象\r\n      // 使用getUserMedia，因为它会覆盖现有的属性。\r\n      // 这里，如果缺少getUserMedia属性，就添加它。\r\n      if (navigator.mediaDevices.getUserMedia === undefined) {\r\n        navigator.mediaDevices.getUserMedia = function(constraints) {\r\n          // 首先获取现存的getUserMedia(如果存在)\r\n          const getUserMedia =\r\n              navigator.webkitGetUserMedia ||\r\n              navigator.mozGetUserMedia ||\r\n              navigator.getUserMedia;\r\n          // 有些浏览器不支持，会返回错误信息\r\n          // 保持接口一致\r\n          if (!getUserMedia) {//不存在则报错\r\n            return Promise.reject(\r\n                new Error(\"getUserMedia is not implemented in this browser\")\r\n            );\r\n          }\r\n          // 否则，使用Promise将调用包装到旧的navigator.getUserMedia\r\n          return new Promise(function(resolve, reject) {\r\n            getUserMedia.call(navigator, constraints, resolve, reject);\r\n          });\r\n        };\r\n      }\r\n      const constraints = {\r\n        audio: false,\r\n        video: {\r\n          width: this.videoWidth,\r\n          height: this.videoHeight,\r\n          transform: \"scaleX(-1)\"\r\n        }\r\n      };\r\n      navigator.mediaDevices\r\n          .getUserMedia(constraints)\r\n          .then(function(stream) {\r\n            // 旧的浏览器可能没有srcObject\r\n            if (\"srcObject\" in _this.thisVideo) {\r\n              _this.thisVideo.srcObject = stream;\r\n            } else {\r\n              // 避免在新的浏览器中使用它，因为它正在被弃用。\r\n              _this.thisVideo.src = window.URL.createObjectURL(stream);\r\n            }\r\n            _this.thisVideo.onloadedmetadata = function() {\r\n              _this.thisVideo.play();\r\n            };\r\n          })\r\n          .catch(err => {\r\n            console.log(err);\r\n          });\r\n    },\r\n    //  绘制图片（拍照功能）\r\n    setImage() {\r\n      const _this = this;\r\n      // canvas画图\r\n      _this.thisContext.drawImage(\r\n          _this.thisVideo,\r\n          300,\r\n          200,\r\n          _this.videoWidth,\r\n          _this.videoHeight\r\n      );\r\n      // 获取图片base64链接\r\n      _this.imgSrc = this.thisCancas.toDataURL(\"image/png\");//赋值并预览图片\r\n    },\r\n    // 关闭摄像头\r\n    stopNavigator() {\r\n      this.thisVideo.srcObject.getTracks()[0].stop();\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n"]},"metadata":{},"sourceType":"module"}